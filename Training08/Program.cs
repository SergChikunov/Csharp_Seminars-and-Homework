/*
Пользователь вводит с клавиатуры целые числа, разделенные запятой. Программа должна собрать из этих чисел массив 
и отсортировать его по возрастанию.
В консоль вывести неотсортированный и отсортированный массивы.
Применить способ сортировки вставками. 
Алгоритм такой: начинаем обработку со второго элемента массива. Запоминаем его значение. Далее в цикле сравниваем 
каждый предыдущий элемент массива с текущим и, при необходимости, меняем их местами до тех пор, пока не дойдем до 
начала цикла или пока не попадется элемент со значением менее текущего. В итоге массив отсортируется по возрастанию.
Дополнительно: выделить функциональные блоки кода в методы. Проверить работоспособность кода на практике.
*/

int[] GetArray() // метод, в ктором получаем элементы массива вводом значений с консоли
{
    Console.WriteLine("Введите через запятую элементы массива, должны быть целые числа, по завершению нажмите Enter...");
    string[] arrayStr = Console.ReadLine().Split(new char[] { ',' });
    /*
    здесь arrayStr — это массив строк.
    Метод Console.ReadLine() возвращает нам последнюю строку из консоли.
    Метод Split(new char[] { ',' }) — это метод для типа string, который возвращает массив строк, 
    созданный из исходной строки. В качестве аргумента этот метод принимает массив символов по которым 
    будет делиться строка. Так как у нас, по условиям задачи, разделитель всего один — запятая, 
    то и массив разделителей в методе Split() содержит всего один элемент.
    */
    int[] intArray = new int[arrayStr.Length]; //создаем массив целых чисел размер которого совпадает с размером массива arrayStr.
    for (int i = 0; i < arrayStr.Length; i++)
    {
        intArray[i] = int.Parse(arrayStr[i]); //наполняем массив числами, используя метод Parse() у типа данных int, который возвращает целое число из строки.
    }
    return intArray;
}

void OutArrayToConsole(int[] arr) // метод выводит значения массива в консоль
{
    foreach (int value in arr)
    {
        Console.Write($"{value}\t");
    }
}

void SwapsElements(int[] arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int[] SortArray(int[] arr01)    // основной блок, уже в виде метода - сортировка массива
{
    int x;  // вспомогательная переменная, для хранения значения элемента массива в цикле
    int j; //счетчик цикла для массива while
    for(int i = 1; i < arr01.Length; i++) //проходим массив начиная с первого элемента
    {
        x = arr01[i]; //присваиваем значение элемента массива переменной x
        j = i; // счетчику цикла while присваиваем значение счетчика i
        while(j > 0 && arr01[j - 1] > x) //пока счетчик j больше 0 и предыдущий элемент массива больше чем текущий выполняем цикл while
        {
            SwapsElements(arr01, j, j - 1); // вызываем метод, который меняет элементы массива местами
            j -= 1; // уменьшаем счетчик j на единицу, чтобы сравнить пару предыдущих элементов массива
        }
        // arr01[j] = x; //надо ли???
    }
        return arr01;
}

int[] intArray = GetArray(); // формируем массив по итогам работы функции GetArray()
Console.WriteLine("\nНеотсортированный массив: ");
OutArrayToConsole(intArray);

intArray = SortArray(intArray); // вызов функции сортировки массива

Console.WriteLine("\n\nОтсортированный массив: ");
OutArrayToConsole(intArray);
